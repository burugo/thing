=== RUN   TestThing_ByID_Found
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (93.584µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (30.292µs)
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.109232 +0800 CST m=+0.002432376 2025-04-28 03:38:31.109232 +0800 CST m=+0.002432376 Test User test@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.109232 +0800 CST m=+0.002432376 2025-04-28 03:38:31.109232 +0800 CST m=+0.002432376 Test User test@example.com]] (Affected: 1, LastInsertID: 1) (12.125µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.109425 +0800 CST m=+3600.002624917
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:176:   - Key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:141: DEBUG GetValue: Key model:users:1 has expiry and is NOT expired
2025/04/28 03:38:31 mock_cache_test.go:154: DEBUG GetValue: Key model:users:1 FOUND with valid data (163 bytes)
2025/04/28 03:38:31 mock_cache_test.go:187: DEBUG GetModel: Key model:users:1 FOUND in cache, unmarshaling...
2025/04/28 03:38:31 mock_cache_test.go:192: DEBUG GetModel: Successfully unmarshaled data for key model:users:1
2025/04/28 03:38:31 thing.go:268: CACHE HIT: Key: model:users:1 (45.417µs)
--- PASS: TestThing_ByID_Found (0.00s)
=== RUN   TestThing_ByID_NotFound
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (25.083µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (20.875µs)
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:999
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:999
2025/04/28 03:38:31 mock_cache_test.go:127: DEBUG GetValue: Key model:users:999 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:183: DEBUG GetModel: Key model:users:999 NOT FOUND in cache
2025/04/28 03:38:31 thing.go:277: CACHE MISS: Key: model:users:999 (6.459µs) - Error: record not found
2025/04/28 03:38:31 sqlite.go:66: DB Get (No Rows): SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE id = ? LIMIT 1 [[999]] (43.584µs)
2025/04/28 03:38:31 thing.go:289: DB MISS: Key: model:users:999 (48.25µs)
--- PASS: TestThing_ByID_NotFound (0.00s)
=== RUN   TestThing_Save_Create
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (18.875µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (18.25µs)
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.109858 +0800 CST m=+0.003057792 2025-04-28 03:38:31.109858 +0800 CST m=+0.003057792 New User new@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.109858 +0800 CST m=+0.003057792 2025-04-28 03:38:31.109858 +0800 CST m=+0.003057792 New User new@example.com]] (Affected: 1, LastInsertID: 1) (7.209µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.10988 +0800 CST m=+3600.003079917
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:176:   - Key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:141: DEBUG GetValue: Key model:users:1 has expiry and is NOT expired
2025/04/28 03:38:31 mock_cache_test.go:154: DEBUG GetValue: Key model:users:1 FOUND with valid data (161 bytes)
2025/04/28 03:38:31 mock_cache_test.go:187: DEBUG GetModel: Key model:users:1 FOUND in cache, unmarshaling...
2025/04/28 03:38:31 mock_cache_test.go:192: DEBUG GetModel: Successfully unmarshaled data for key model:users:1
2025/04/28 03:38:31 thing.go:268: CACHE HIT: Key: model:users:1 (14.833µs)
--- PASS: TestThing_Save_Create (0.00s)
=== RUN   TestThing_Save_Update
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (16.458µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (17.084µs)
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209 2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209 Original Name original@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209 2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209 Original Name original@example.com]] (Affected: 1, LastInsertID: 1) (5.375µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.110012 +0800 CST m=+3600.003212209
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:176:   - Key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:141: DEBUG GetValue: Key model:users:1 has expiry and is NOT expired
2025/04/28 03:38:31 mock_cache_test.go:154: DEBUG GetValue: Key model:users:1 FOUND with valid data (171 bytes)
2025/04/28 03:38:31 mock_cache_test.go:187: DEBUG GetModel: Key model:users:1 FOUND in cache, unmarshaling...
2025/04/28 03:38:31 mock_cache_test.go:192: DEBUG GetModel: Successfully unmarshaled data for key model:users:1
2025/04/28 03:38:31 thing.go:268: CACHE HIT: Key: model:users:1 (13.042µs)
2025/04/28 03:38:31 thing.go:924: DEBUG: Starting change detection for type User
2025/04/28 03:38:31 thing.go:883: DEBUG: [User.BaseModel] Recursing into embedded struct
2025/04/28 03:38:31 thing.go:898: DEBUG: [User.BaseModel.ID] Skipping field (no db tag, ignored, or PK). Exists: true, DBCol: id, PK: id
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.BaseModel.CreatedAt] Comparing DB:'created_at' Original: [2025-04-28 03:38:31.109992 +0800 CST] (time.Time), Updated: [2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209] (time.Time), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.BaseModel.CreatedAt] Change DETECTED for DB column 'created_at'
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.BaseModel.UpdatedAt] Comparing DB:'updated_at' Original: [2025-04-28 03:38:31.109992 +0800 CST] (time.Time), Updated: [2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209] (time.Time), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.BaseModel.UpdatedAt] Change DETECTED for DB column 'updated_at'
2025/04/28 03:38:31 thing.go:892: DEBUG: [User.BaseModel.isNewRecord] Skipping unexported field
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.Name] Comparing DB:'name' Original: [Original Name] (string), Updated: [Updated Name] (string), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.Name] Change DETECTED for DB column 'name'
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.Email] Comparing DB:'email' Original: [original@example.com] (string), Updated: [updated@example.com] (string), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.Email] Change DETECTED for DB column 'email'
2025/04/28 03:38:31 thing.go:898: DEBUG: [User.Books] Skipping field (no db tag, ignored, or PK). Exists: false, DBCol: , PK: id
2025/04/28 03:38:31 thing.go:926: DEBUG: Raw changed map for User: map[created_at:2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209 email:updated@example.com name:Updated Name updated_at:2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209]
2025/04/28 03:38:31 thing.go:941: DEBUG: Final changed map for User after UpdatedAt check: map[created_at:2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209 email:updated@example.com name:Updated Name updated_at:2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209]
2025/04/28 03:38:31 mock_cache_test.go:306: DEBUG AcquireLock: Attempting to acquire lock: lock:users:1 with expiration: 5s
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key lock:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:320: DEBUG AcquireLock: Acquired lock lock:users:1 with expiry at 2025-04-28 03:38:36.110094 +0800 CST m=+5.003294084
2025/04/28 03:38:31 thing.go:1158: Lock acquired for key 'lock:users:1'
2025/04/28 03:38:31 thing.go:482: DB UPDATE: UPDATE users SET created_at = ?, email = ?, name = ?, updated_at = ? WHERE id = ? [[2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209 updated@example.com Updated Name 2025-04-28 03:38:31.110016 +0800 CST m=+0.003216292 1]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: UPDATE users SET created_at = ?, email = ?, name = ?, updated_at = ? WHERE id = ? [[2025-04-28 03:38:31.109992 +0800 CST m=+0.003192209 updated@example.com Updated Name 2025-04-28 03:38:31.110016 +0800 CST m=+0.003216292 1]] (Affected: 1, LastInsertID: 1) (7.583µs)
2025/04/28 03:38:31 mock_cache_test.go:226: DEBUG DeleteModel: Deleting key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:374: DEBUG InvalidateQueriesContainingID: Finding and invalidating query cache entries with prefix 'query:users:' containing ID 1
2025/04/28 03:38:31 mock_cache_test.go:423: DEBUG InvalidateQueriesContainingID: Invalidated 0 query cache entries
2025/04/28 03:38:31 mock_cache_test.go:333: DEBUG ReleaseLock: Releasing lock: lock:users:1
2025/04/28 03:38:31 thing.go:1155: Lock released for key 'lock:users:1'
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:127: DEBUG GetValue: Key model:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:183: DEBUG GetModel: Key model:users:1 NOT FOUND in cache
2025/04/28 03:38:31 thing.go:277: CACHE MISS: Key: model:users:1 (5.917µs) - Error: record not found
2025/04/28 03:38:31 sqlite.go:72: DB Get: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE id = ? LIMIT 1 [[1]] (17.584µs)
2025/04/28 03:38:31 thing.go:298: DB HIT: Key: model:users:1 (20.792µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.11017 +0800 CST m=+3600.003369917
--- PASS: TestThing_Save_Update (0.00s)
=== RUN   TestThing_Delete
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (15.917µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (15.208µs)
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110259 +0800 CST m=+0.003458876 2025-04-28 03:38:31.110259 +0800 CST m=+0.003458876 Delete Me delete@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110259 +0800 CST m=+0.003458876 2025-04-28 03:38:31.110259 +0800 CST m=+0.003458876 Delete Me delete@example.com]] (Affected: 1, LastInsertID: 1) (5µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.110275 +0800 CST m=+3600.003475584
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:176:   - Key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:141: DEBUG GetValue: Key model:users:1 has expiry and is NOT expired
2025/04/28 03:38:31 mock_cache_test.go:154: DEBUG GetValue: Key model:users:1 FOUND with valid data (165 bytes)
2025/04/28 03:38:31 mock_cache_test.go:187: DEBUG GetModel: Key model:users:1 FOUND in cache, unmarshaling...
2025/04/28 03:38:31 mock_cache_test.go:192: DEBUG GetModel: Successfully unmarshaled data for key model:users:1
2025/04/28 03:38:31 thing.go:268: CACHE HIT: Key: model:users:1 (13.708µs)
2025/04/28 03:38:31 mock_cache_test.go:306: DEBUG AcquireLock: Attempting to acquire lock: lock:users:1 with expiration: 5s
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key lock:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:320: DEBUG AcquireLock: Acquired lock lock:users:1 with expiry at 2025-04-28 03:38:36.110301 +0800 CST m=+5.003501542
2025/04/28 03:38:31 thing.go:1158: Lock acquired for key 'lock:users:1'
2025/04/28 03:38:31 thing.go:563: DB DELETE: DELETE FROM users WHERE id = ? [1]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: DELETE FROM users WHERE id = ? [[1]] (Affected: 1, LastInsertID: 1) (5.417µs)
2025/04/28 03:38:31 mock_cache_test.go:226: DEBUG DeleteModel: Deleting key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:374: DEBUG InvalidateQueriesContainingID: Finding and invalidating query cache entries with prefix 'query:users:' containing ID 1
2025/04/28 03:38:31 mock_cache_test.go:423: DEBUG InvalidateQueriesContainingID: Invalidated 0 query cache entries
2025/04/28 03:38:31 mock_cache_test.go:333: DEBUG ReleaseLock: Releasing lock: lock:users:1
2025/04/28 03:38:31 thing.go:1155: Lock released for key 'lock:users:1'
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:127: DEBUG GetValue: Key model:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:183: DEBUG GetModel: Key model:users:1 NOT FOUND in cache
2025/04/28 03:38:31 thing.go:277: CACHE MISS: Key: model:users:1 (5.792µs) - Error: record not found
2025/04/28 03:38:31 sqlite.go:66: DB Get (No Rows): SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE id = ? LIMIT 1 [[1]] (6.542µs)
2025/04/28 03:38:31 thing.go:289: DB MISS: Key: model:users:1 (9.666µs)
--- PASS: TestThing_Delete (0.00s)
=== RUN   TestThing_Query
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (13.625µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (17.834µs)
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110438 +0800 CST m=+0.003637959 2025-04-28 03:38:31.110438 +0800 CST m=+0.003637959 Alice alice@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110438 +0800 CST m=+0.003637959 2025-04-28 03:38:31.110438 +0800 CST m=+0.003637959 Alice alice@example.com]] (Affected: 1, LastInsertID: 1) (4.791µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.110454 +0800 CST m=+3600.003653626
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110457 +0800 CST m=+0.003656584 2025-04-28 03:38:31.110457 +0800 CST m=+0.003656584 Bob bob@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110457 +0800 CST m=+0.003656584 2025-04-28 03:38:31.110457 +0800 CST m=+0.003656584 Bob bob@example.com]] (Affected: 1, LastInsertID: 2) (4.834µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:2 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:2 with expiry at 2025-04-28 04:38:31.110475 +0800 CST m=+3600.003675084
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110478 +0800 CST m=+0.003678126 2025-04-28 03:38:31.110478 +0800 CST m=+0.003678126 Charlie charlie@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110478 +0800 CST m=+0.003678126 2025-04-28 03:38:31.110478 +0800 CST m=+0.003678126 Charlie charlie@example.com]] (Affected: 1, LastInsertID: 3) (4.291µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:3 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:3 with expiry at 2025-04-28 04:38:31.110493 +0800 CST m=+3600.003693292
2025/04/28 03:38:31 thing.go:1017: Built SQL: SELECT "id", "created_at", "updated_at", "name", "email" FROM users | Args: []
2025/04/28 03:38:31 sqlite.go:91: DB Select: SELECT "id", "created_at", "updated_at", "name", "email" FROM users [[]] (13.792µs)
2025/04/28 03:38:31 thing.go:1017: Built SQL: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name = ? | Args: [Bob]
2025/04/28 03:38:31 sqlite.go:91: DB Select: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name = ? [[Bob]] (9.333µs)
--- PASS: TestThing_Query (0.00s)
=== RUN   TestThing_IDs
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (15.166µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (14.875µs)
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110608 +0800 CST m=+0.003807584 2025-04-28 03:38:31.110608 +0800 CST m=+0.003807584 David david@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110608 +0800 CST m=+0.003807584 2025-04-28 03:38:31.110608 +0800 CST m=+0.003807584 David david@example.com]] (Affected: 1, LastInsertID: 1) (4.25µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.110623 +0800 CST m=+3600.003822834
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110626 +0800 CST m=+0.003825917 2025-04-28 03:38:31.110626 +0800 CST m=+0.003825917 Eva eva@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110626 +0800 CST m=+0.003825917 2025-04-28 03:38:31.110626 +0800 CST m=+0.003825917 Eva eva@example.com]] (Affected: 1, LastInsertID: 2) (4µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:2 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:2 with expiry at 2025-04-28 04:38:31.11064 +0800 CST m=+3600.003840167
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110643 +0800 CST m=+0.003843126 2025-04-28 03:38:31.110643 +0800 CST m=+0.003843126 Frank frank@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110643 +0800 CST m=+0.003843126 2025-04-28 03:38:31.110643 +0800 CST m=+0.003843126 Frank frank@example.com]] (Affected: 1, LastInsertID: 3) (4.083µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:3 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:3 with expiry at 2025-04-28 04:38:31.110658 +0800 CST m=+3600.003857792
2025/04/28 03:38:31 mock_cache_test.go:237: DEBUG GetQueryIDs: Looking up query key: query:users:801f1ceb51da8f867ad4c78368ebea017d9e3b4a011ce526c0fc659bdc0d1224
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: query:users:801f1ceb51da8f867ad4c78368ebea017d9e3b4a011ce526c0fc659bdc0d1224
2025/04/28 03:38:31 mock_cache_test.go:127: DEBUG GetValue: Key query:users:801f1ceb51da8f867ad4c78368ebea017d9e3b4a011ce526c0fc659bdc0d1224 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:242: DEBUG GetQueryIDs: Query key query:users:801f1ceb51da8f867ad4c78368ebea017d9e3b4a011ce526c0fc659bdc0d1224 NOT FOUND in cache
2025/04/28 03:38:31 thing.go:680: QUERY CACHE MISS: Key: query:users:801f1ceb51da8f867ad4c78368ebea017d9e3b4a011ce526c0fc659bdc0d1224 (6.75µs) - Error: record not found
2025/04/28 03:38:31 sqlite.go:91: DB Select: SELECT "id" FROM users WHERE name IN (?, ?, ?) [[David Eva Frank]] (21.916µs)
2025/04/28 03:38:31 thing.go:699: DB HIT (Query IDs): SELECT "id" FROM users WHERE name IN (?, ?, ?) [[David Eva Frank]] (3 IDs) (25.417µs)
2025/04/28 03:38:31 mock_cache_test.go:267: DEBUG SetQueryIDs: Setting query key: query:users:801f1ceb51da8f867ad4c78368ebea017d9e3b4a011ce526c0fc659bdc0d1224 with 3 IDs, expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:269: DEBUG SetQueryIDs: First few IDs: [1 2 3]
2025/04/28 03:38:31 mock_cache_test.go:282: DEBUG SetQueryIDs: Set query key query:users:801f1ceb51da8f867ad4c78368ebea017d9e3b4a011ce526c0fc659bdc0d1224 with expiry at 2025-04-28 04:38:31.110723 +0800 CST m=+3600.003922876
--- PASS: TestThing_IDs (0.00s)
=== RUN   TestThing_ByID_Cache_MissAndSet
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (16.5µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (14.875µs)
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 0
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110815 +0800 CST m=+0.004014751 2025-04-28 03:38:31.110815 +0800 CST m=+0.004014751 Cache Test User cache@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.110815 +0800 CST m=+0.004014751 2025-04-28 03:38:31.110815 +0800 CST m=+0.004014751 Cache Test User cache@example.com]] (Affected: 1, LastInsertID: 1) (4.542µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.11083 +0800 CST m=+3600.004029959
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:52:   - Key: model:users:1 (170 bytes)
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 1
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:127: DEBUG GetValue: Key model:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:183: DEBUG GetModel: Key model:users:1 NOT FOUND in cache
2025/04/28 03:38:31 thing.go:277: CACHE MISS: Key: model:users:1 (5.125µs) - Error: record not found
2025/04/28 03:38:31 sqlite.go:72: DB Get: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE id = ? LIMIT 1 [[1]] (8.125µs)
2025/04/28 03:38:31 thing.go:298: DB HIT: Key: model:users:1 (10.792µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.110863 +0800 CST m=+3600.004062917
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key User:1 NOT found in store
    cache_operations_test.go:46: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:46
        	Error:      	Should be true
        	Test:       	TestThing_ByID_Cache_MissAndSet
        	Messages:   	Model should be stored in cache
--- FAIL: TestThing_ByID_Cache_MissAndSet (0.00s)
=== RUN   TestThing_ByID_Cache_Hit
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (14.833µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (14.416µs)
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 0
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.11099 +0800 CST m=+0.004190501 2025-04-28 03:38:31.11099 +0800 CST m=+0.004190501 Cache Hit User cache-hit@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.11099 +0800 CST m=+0.004190501 2025-04-28 03:38:31.11099 +0800 CST m=+0.004190501 Cache Hit User cache-hit@example.com]] (Affected: 1, LastInsertID: 1) (4.708µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.111008 +0800 CST m=+3600.004208001
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:52:   - Key: model:users:1 (171 bytes)
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 1
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:127: DEBUG GetValue: Key model:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:183: DEBUG GetModel: Key model:users:1 NOT FOUND in cache
2025/04/28 03:38:31 thing.go:277: CACHE MISS: Key: model:users:1 (4.875µs) - Error: record not found
2025/04/28 03:38:31 sqlite.go:72: DB Get: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE id = ? LIMIT 1 [[1]] (8.458µs)
2025/04/28 03:38:31 thing.go:298: DB HIT: Key: model:users:1 (11.542µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.111043 +0800 CST m=+3600.004242751
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:176:   - Key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:141: DEBUG GetValue: Key model:users:1 has expiry and is NOT expired
2025/04/28 03:38:31 mock_cache_test.go:154: DEBUG GetValue: Key model:users:1 FOUND with valid data (171 bytes)
2025/04/28 03:38:31 mock_cache_test.go:187: DEBUG GetModel: Key model:users:1 FOUND in cache, unmarshaling...
2025/04/28 03:38:31 mock_cache_test.go:192: DEBUG GetModel: Successfully unmarshaled data for key model:users:1
2025/04/28 03:38:31 thing.go:268: CACHE HIT: Key: model:users:1 (11.042µs)
--- PASS: TestThing_ByID_Cache_Hit (0.00s)
=== RUN   TestThing_Query_Cache
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (13.042µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (15.583µs)
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 0
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.111141 +0800 CST m=+0.004340542 2025-04-28 03:38:31.111141 +0800 CST m=+0.004340542 Alice Cache alice-cache@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.111141 +0800 CST m=+0.004340542 2025-04-28 03:38:31.111141 +0800 CST m=+0.004340542 Alice Cache alice-cache@example.com]] (Affected: 1, LastInsertID: 1) (4.917µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.111157 +0800 CST m=+3600.004357209
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.111161 +0800 CST m=+0.004361417 2025-04-28 03:38:31.111161 +0800 CST m=+0.004361417 Bob Cache bob-cache@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.111161 +0800 CST m=+0.004361417 2025-04-28 03:38:31.111161 +0800 CST m=+0.004361417 Bob Cache bob-cache@example.com]] (Affected: 1, LastInsertID: 2) (4µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:2 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:2 with expiry at 2025-04-28 04:38:31.111179 +0800 CST m=+3600.004379084
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.111184 +0800 CST m=+0.004384126 2025-04-28 03:38:31.111184 +0800 CST m=+0.004384126 Charlie Cache charlie-cache@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.111184 +0800 CST m=+0.004384126 2025-04-28 03:38:31.111184 +0800 CST m=+0.004384126 Charlie Cache charlie-cache@example.com]] (Affected: 1, LastInsertID: 3) (4.042µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:3 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:3 with expiry at 2025-04-28 04:38:31.111211 +0800 CST m=+3600.004410876
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:52:   - Key: model:users:1 (172 bytes)
2025/04/28 03:38:31 mock_cache_test.go:52:   - Key: model:users:3 (176 bytes)
2025/04/28 03:38:31 mock_cache_test.go:52:   - Key: model:users:2 (168 bytes)
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 3
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 thing.go:1017: Built SQL: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name LIKE ? | Args: [%Cache]
2025/04/28 03:38:31 sqlite.go:91: DB Select: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name LIKE ? [[%Cache]] (33.5µs)
    cache_operations_test.go:116: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:116
        	Error:      	Not equal: 
        	            	expected: 1
        	            	actual  : 0
        	Test:       	TestThing_Query_Cache
        	Messages:   	Should attempt to get query from cache
    cache_operations_test.go:117: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:117
        	Error:      	Not equal: 
        	            	expected: 1
        	            	actual  : 0
        	Test:       	TestThing_Query_Cache
        	Messages:   	Should set query result in cache
    cache_operations_test.go:118: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:118
        	Error:      	Not equal: 
        	            	expected: 3
        	            	actual  : 0
        	Test:       	TestThing_Query_Cache
        	Messages:   	Should get each model (3 users)
    cache_operations_test.go:119: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:119
        	Error:      	Not equal: 
        	            	expected: 3
        	            	actual  : 0
        	Test:       	TestThing_Query_Cache
        	Messages:   	Should set each model in cache
2025/04/28 03:38:31 thing.go:1017: Built SQL: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name LIKE ? | Args: [%Cache]
2025/04/28 03:38:31 sqlite.go:91: DB Select: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name LIKE ? [[%Cache]] (32µs)
    cache_operations_test.go:133: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:133
        	Error:      	Not equal: 
        	            	expected: 1
        	            	actual  : 0
        	Test:       	TestThing_Query_Cache
        	Messages:   	Should attempt to get query from cache
    cache_operations_test.go:135: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:135
        	Error:      	Not equal: 
        	            	expected: 3
        	            	actual  : 0
        	Test:       	TestThing_Query_Cache
        	Messages:   	Should get each model from cache
--- FAIL: TestThing_Query_Cache (0.00s)
=== RUN   TestThing_Query_CacheInvalidation
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (33µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (25.5µs)
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 0
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959 2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959 Invalidate User invalidate@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959 2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959 Invalidate User invalidate@example.com]] (Affected: 1, LastInsertID: 1) (11.125µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.111631 +0800 CST m=+3600.004830917
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:52:   - Key: model:users:1 (175 bytes)
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 1
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 thing.go:1017: Built SQL: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name = ? | Args: [Invalidate User]
2025/04/28 03:38:31 sqlite.go:91: DB Select: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name = ? [[Invalidate User]] (14.792µs)
    cache_operations_test.go:162: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:162
        	Error:      	Not equal: 
        	            	expected: 1
        	            	actual  : 0
        	Test:       	TestThing_Query_CacheInvalidation
        	Messages:   	Should cache the query
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:127: DEBUG GetValue: Key model:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:183: DEBUG GetModel: Key model:users:1 NOT FOUND in cache
2025/04/28 03:38:31 thing.go:277: CACHE MISS: Key: model:users:1 (5.833µs) - Error: record not found
2025/04/28 03:38:31 sqlite.go:72: DB Get: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE id = ? LIMIT 1 [[1]] (9.542µs)
2025/04/28 03:38:31 thing.go:298: DB HIT: Key: model:users:1 (12.625µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.111703 +0800 CST m=+3600.004902917
2025/04/28 03:38:31 thing.go:924: DEBUG: Starting change detection for type User
2025/04/28 03:38:31 thing.go:883: DEBUG: [User.BaseModel] Recursing into embedded struct
2025/04/28 03:38:31 thing.go:898: DEBUG: [User.BaseModel.ID] Skipping field (no db tag, ignored, or PK). Exists: true, DBCol: id, PK: id
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.BaseModel.CreatedAt] Comparing DB:'created_at' Original: [2025-04-28 03:38:31.111603 +0800 +0800] (time.Time), Updated: [2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959] (time.Time), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.BaseModel.CreatedAt] Change DETECTED for DB column 'created_at'
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.BaseModel.UpdatedAt] Comparing DB:'updated_at' Original: [2025-04-28 03:38:31.111603 +0800 +0800] (time.Time), Updated: [2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959] (time.Time), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.BaseModel.UpdatedAt] Change DETECTED for DB column 'updated_at'
2025/04/28 03:38:31 thing.go:892: DEBUG: [User.BaseModel.isNewRecord] Skipping unexported field
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.Name] Comparing DB:'name' Original: [Invalidate User] (string), Updated: [Updated Invalidate User] (string), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.Name] Change DETECTED for DB column 'name'
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.Email] Comparing DB:'email' Original: [invalidate@example.com] (string), Updated: [invalidate@example.com] (string), Equal: true
2025/04/28 03:38:31 thing.go:898: DEBUG: [User.Books] Skipping field (no db tag, ignored, or PK). Exists: false, DBCol: , PK: id
2025/04/28 03:38:31 thing.go:926: DEBUG: Raw changed map for User: map[created_at:2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959 name:Updated Invalidate User updated_at:2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959]
2025/04/28 03:38:31 thing.go:941: DEBUG: Final changed map for User after UpdatedAt check: map[created_at:2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959 name:Updated Invalidate User updated_at:2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959]
2025/04/28 03:38:31 mock_cache_test.go:306: DEBUG AcquireLock: Attempting to acquire lock: lock:users:1 with expiration: 5s
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key lock:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:320: DEBUG AcquireLock: Acquired lock lock:users:1 with expiry at 2025-04-28 03:38:36.111743 +0800 CST m=+5.004943167
2025/04/28 03:38:31 thing.go:1158: Lock acquired for key 'lock:users:1'
2025/04/28 03:38:31 thing.go:482: DB UPDATE: UPDATE users SET created_at = ?, name = ?, updated_at = ? WHERE id = ? [[2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959 Updated Invalidate User 2025-04-28 03:38:31.111676 +0800 CST m=+0.004876209 1]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: UPDATE users SET created_at = ?, name = ?, updated_at = ? WHERE id = ? [[2025-04-28 03:38:31.111603 +0800 CST m=+0.004802959 Updated Invalidate User 2025-04-28 03:38:31.111676 +0800 CST m=+0.004876209 1]] (Affected: 1, LastInsertID: 1) (7.708µs)
2025/04/28 03:38:31 mock_cache_test.go:226: DEBUG DeleteModel: Deleting key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:374: DEBUG InvalidateQueriesContainingID: Finding and invalidating query cache entries with prefix 'query:users:' containing ID 1
2025/04/28 03:38:31 mock_cache_test.go:423: DEBUG InvalidateQueriesContainingID: Invalidated 0 query cache entries
2025/04/28 03:38:31 mock_cache_test.go:333: DEBUG ReleaseLock: Releasing lock: lock:users:1
2025/04/28 03:38:31 thing.go:1155: Lock released for key 'lock:users:1'
2025/04/28 03:38:31 thing.go:1017: Built SQL: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name = ? | Args: [Invalidate User]
2025/04/28 03:38:31 sqlite.go:91: DB Select: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name = ? [[Invalidate User]] (21.542µs)
2025/04/28 03:38:31 thing.go:1017: Built SQL: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name = ? | Args: [Updated Invalidate User]
2025/04/28 03:38:31 sqlite.go:91: DB Select: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE name = ? [[Updated Invalidate User]] (15.208µs)
--- FAIL: TestThing_Query_CacheInvalidation (0.00s)
=== RUN   TestThing_Save_Create_Cache
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (33.875µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (36.333µs)
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 0
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 0
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.112001 +0800 CST m=+0.005201459 2025-04-28 03:38:31.112001 +0800 CST m=+0.005201459 New Cache User new-cache@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.112001 +0800 CST m=+0.005201459 2025-04-28 03:38:31.112001 +0800 CST m=+0.005201459 New Cache User new-cache@example.com]] (Affected: 1, LastInsertID: 1) (9.292µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.112034 +0800 CST m=+3600.005234042
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key User:1 NOT found in store
    cache_operations_test.go:219: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:219
        	Error:      	Should be true
        	Test:       	TestThing_Save_Create_Cache
        	Messages:   	Model should be stored in cache
--- FAIL: TestThing_Save_Create_Cache (0.00s)
=== RUN   TestThing_Save_Update_Cache
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (21.25µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (20.834µs)
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 0
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209 2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209 Original Cache Name original-cache@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209 2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209 Original Cache Name original-cache@example.com]] (Affected: 1, LastInsertID: 1) (6.167µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.112198 +0800 CST m=+3600.005398501
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:52:   - Key: model:users:1 (183 bytes)
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 1
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:127: DEBUG GetValue: Key model:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:183: DEBUG GetModel: Key model:users:1 NOT FOUND in cache
2025/04/28 03:38:31 thing.go:277: CACHE MISS: Key: model:users:1 (6.209µs) - Error: record not found
2025/04/28 03:38:31 sqlite.go:72: DB Get: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE id = ? LIMIT 1 [[1]] (9.084µs)
2025/04/28 03:38:31 thing.go:298: DB HIT: Key: model:users:1 (11.916µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.112239 +0800 CST m=+3600.005439042
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key User:1 NOT found in store
    cache_operations_test.go:243: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:243
        	Error:      	Should be true
        	Test:       	TestThing_Save_Update_Cache
        	Messages:   	Model should be in cache before update
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:176:   - Key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:141: DEBUG GetValue: Key model:users:1 has expiry and is NOT expired
2025/04/28 03:38:31 mock_cache_test.go:154: DEBUG GetValue: Key model:users:1 FOUND with valid data (183 bytes)
2025/04/28 03:38:31 mock_cache_test.go:187: DEBUG GetModel: Key model:users:1 FOUND in cache, unmarshaling...
2025/04/28 03:38:31 mock_cache_test.go:192: DEBUG GetModel: Successfully unmarshaled data for key model:users:1
2025/04/28 03:38:31 thing.go:268: CACHE HIT: Key: model:users:1 (14.583µs)
2025/04/28 03:38:31 thing.go:924: DEBUG: Starting change detection for type User
2025/04/28 03:38:31 thing.go:883: DEBUG: [User.BaseModel] Recursing into embedded struct
2025/04/28 03:38:31 thing.go:898: DEBUG: [User.BaseModel.ID] Skipping field (no db tag, ignored, or PK). Exists: true, DBCol: id, PK: id
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.BaseModel.CreatedAt] Comparing DB:'created_at' Original: [2025-04-28 03:38:31.112179 +0800 CST] (time.Time), Updated: [2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209] (time.Time), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.BaseModel.CreatedAt] Change DETECTED for DB column 'created_at'
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.BaseModel.UpdatedAt] Comparing DB:'updated_at' Original: [2025-04-28 03:38:31.112179 +0800 CST] (time.Time), Updated: [2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209] (time.Time), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.BaseModel.UpdatedAt] Change DETECTED for DB column 'updated_at'
2025/04/28 03:38:31 thing.go:892: DEBUG: [User.BaseModel.isNewRecord] Skipping unexported field
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.Name] Comparing DB:'name' Original: [Original Cache Name] (string), Updated: [Updated Cache Name] (string), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.Name] Change DETECTED for DB column 'name'
2025/04/28 03:38:31 thing.go:914: DEBUG: [User.Email] Comparing DB:'email' Original: [original-cache@example.com] (string), Updated: [updated-cache@example.com] (string), Equal: false
2025/04/28 03:38:31 thing.go:918: DEBUG: [User.Email] Change DETECTED for DB column 'email'
2025/04/28 03:38:31 thing.go:898: DEBUG: [User.Books] Skipping field (no db tag, ignored, or PK). Exists: false, DBCol: , PK: id
2025/04/28 03:38:31 thing.go:926: DEBUG: Raw changed map for User: map[created_at:2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209 email:updated-cache@example.com name:Updated Cache Name updated_at:2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209]
2025/04/28 03:38:31 thing.go:941: DEBUG: Final changed map for User after UpdatedAt check: map[created_at:2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209 email:updated-cache@example.com name:Updated Cache Name updated_at:2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209]
2025/04/28 03:38:31 mock_cache_test.go:306: DEBUG AcquireLock: Attempting to acquire lock: lock:users:1 with expiration: 5s
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key lock:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:320: DEBUG AcquireLock: Acquired lock lock:users:1 with expiry at 2025-04-28 03:38:36.11232 +0800 CST m=+5.005520251
2025/04/28 03:38:31 thing.go:1158: Lock acquired for key 'lock:users:1'
2025/04/28 03:38:31 thing.go:482: DB UPDATE: UPDATE users SET created_at = ?, email = ?, name = ?, updated_at = ? WHERE id = ? [[2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209 updated-cache@example.com Updated Cache Name 2025-04-28 03:38:31.112265 +0800 CST m=+0.005464917 1]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: UPDATE users SET created_at = ?, email = ?, name = ?, updated_at = ? WHERE id = ? [[2025-04-28 03:38:31.112179 +0800 CST m=+0.005379209 updated-cache@example.com Updated Cache Name 2025-04-28 03:38:31.112265 +0800 CST m=+0.005464917 1]] (Affected: 1, LastInsertID: 1) (6.708µs)
2025/04/28 03:38:31 mock_cache_test.go:226: DEBUG DeleteModel: Deleting key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:374: DEBUG InvalidateQueriesContainingID: Finding and invalidating query cache entries with prefix 'query:users:' containing ID 1
2025/04/28 03:38:31 mock_cache_test.go:423: DEBUG InvalidateQueriesContainingID: Invalidated 0 query cache entries
2025/04/28 03:38:31 mock_cache_test.go:333: DEBUG ReleaseLock: Releasing lock: lock:users:1
2025/04/28 03:38:31 thing.go:1155: Lock released for key 'lock:users:1'
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key User:1 NOT found in store
    cache_operations_test.go:262: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:262
        	Error:      	Should be true
        	Test:       	TestThing_Save_Update_Cache
        	Messages:   	Updated model should be stored in cache
--- FAIL: TestThing_Save_Update_Cache (0.00s)
=== RUN   TestThing_Delete_Cache
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (17.041µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (16.292µs)
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 0
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.112455 +0800 CST m=+0.005655042 2025-04-28 03:38:31.112455 +0800 CST m=+0.005655042 Delete Cache User delete-cache@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.112455 +0800 CST m=+0.005655042 2025-04-28 03:38:31.112455 +0800 CST m=+0.005655042 Delete Cache User delete-cache@example.com]] (Affected: 1, LastInsertID: 1) (8.917µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.112475 +0800 CST m=+3600.005675417
2025/04/28 03:38:31 mock_cache_test.go:47: DEBUG Reset: Cache state BEFORE reset:
2025/04/28 03:38:31 mock_cache_test.go:52:   - Key: model:users:1 (179 bytes)
2025/04/28 03:38:31 mock_cache_test.go:58: DEBUG Reset: Total keys before reset: 1
2025/04/28 03:38:31 mock_cache_test.go:90: DEBUG Reset: Cache cleared. Keys remaining: 0
2025/04/28 03:38:31 mock_cache_test.go:174: DEBUG GetModel: Current keys in cache for key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:124: DEBUG GetValue: Checking key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:127: DEBUG GetValue: Key model:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:183: DEBUG GetModel: Key model:users:1 NOT FOUND in cache
2025/04/28 03:38:31 thing.go:277: CACHE MISS: Key: model:users:1 (5.166µs) - Error: record not found
2025/04/28 03:38:31 sqlite.go:72: DB Get: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE id = ? LIMIT 1 [[1]] (8.167µs)
2025/04/28 03:38:31 thing.go:298: DB HIT: Key: model:users:1 (10.875µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.112509 +0800 CST m=+3600.005709167
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key User:1 NOT found in store
    cache_operations_test.go:286: 
        	Error Trace:	/Users/buru/Work/thing/tests/cache_operations_test.go:286
        	Error:      	Should be true
        	Test:       	TestThing_Delete_Cache
        	Messages:   	Model should be in cache before delete
2025/04/28 03:38:31 mock_cache_test.go:306: DEBUG AcquireLock: Attempting to acquire lock: lock:users:1 with expiration: 5s
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key lock:users:1 NOT found in store
2025/04/28 03:38:31 mock_cache_test.go:320: DEBUG AcquireLock: Acquired lock lock:users:1 with expiry at 2025-04-28 03:38:36.11253 +0800 CST m=+5.005729751
2025/04/28 03:38:31 thing.go:1158: Lock acquired for key 'lock:users:1'
2025/04/28 03:38:31 thing.go:563: DB DELETE: DELETE FROM users WHERE id = ? [1]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: DELETE FROM users WHERE id = ? [[1]] (Affected: 1, LastInsertID: 1) (5.083µs)
2025/04/28 03:38:31 mock_cache_test.go:226: DEBUG DeleteModel: Deleting key: model:users:1
2025/04/28 03:38:31 mock_cache_test.go:374: DEBUG InvalidateQueriesContainingID: Finding and invalidating query cache entries with prefix 'query:users:' containing ID 1
2025/04/28 03:38:31 mock_cache_test.go:423: DEBUG InvalidateQueriesContainingID: Invalidated 0 query cache entries
2025/04/28 03:38:31 mock_cache_test.go:333: DEBUG ReleaseLock: Releasing lock: lock:users:1
2025/04/28 03:38:31 thing.go:1155: Lock released for key 'lock:users:1'
2025/04/28 03:38:31 mock_cache_test.go:99: DEBUG Exists: Key User:1 NOT found in store
--- FAIL: TestThing_Delete_Cache (0.00s)
=== RUN   TestThing_Query_Preload_BelongsTo
2025/04/28 03:38:31 sqlite.go:33: Initializing SQLite adapter with DSN: :memory:
2025/04/28 03:38:31 sqlite.go:50: SQLite adapter initialized successfully.
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			name TEXT,
			email TEXT,
			created_at DATETIME,
			updated_at DATETIME
		); [[]] (Affected: 0, LastInsertID: 0) (15.625µs)
2025/04/28 03:38:31 sqlite.go:110: DB Exec: CREATE TABLE IF NOT EXISTS books (
			id INTEGER PRIMARY KEY,
			title TEXT,
			user_id INTEGER,
			created_at DATETIME,
			updated_at DATETIME,
			FOREIGN KEY(user_id) REFERENCES users(id)
		); [[]] (Affected: 0, LastInsertID: 0) (16.75µs)
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:104: New Thing instance created.
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.112639 +0800 CST m=+0.005839001 2025-04-28 03:38:31.112639 +0800 CST m=+0.005839001 Book Owner owner@example.com]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO users (created_at, updated_at, name, email) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.112639 +0800 CST m=+0.005839001 2025-04-28 03:38:31.112639 +0800 CST m=+0.005839001 Book Owner owner@example.com]] (Affected: 1, LastInsertID: 1) (5.166µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:users:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:users:1 with expiry at 2025-04-28 04:38:31.112654 +0800 CST m=+3600.005854417
2025/04/28 03:38:31 thing.go:385: DB INSERT: INSERT INTO books (created_at, updated_at, title, user_id) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.112671 +0800 CST m=+0.005871209 2025-04-28 03:38:31.112671 +0800 CST m=+0.005871209 User's Book 1]]
2025/04/28 03:38:31 sqlite.go:110: DB Exec: INSERT INTO books (created_at, updated_at, title, user_id) VALUES (?, ?, ?, ?) [[2025-04-28 03:38:31.112671 +0800 CST m=+0.005871209 2025-04-28 03:38:31.112671 +0800 CST m=+0.005871209 User's Book 1]] (Affected: 1, LastInsertID: 1) (4.958µs)
2025/04/28 03:38:31 mock_cache_test.go:201: DEBUG SetModel: Setting key: model:books:1 with expiration: 1h0m0s
2025/04/28 03:38:31 mock_cache_test.go:213: DEBUG SetModel: Set key model:books:1 with expiry at 2025-04-28 04:38:31.112691 +0800 CST m=+3600.005891001
2025/04/28 03:38:31 thing.go:1017: Built SQL: SELECT "id", "created_at", "updated_at", "title", "user_id" FROM books WHERE id = ? | Args: [1]
2025/04/28 03:38:31 sqlite.go:91: DB Select: SELECT "id", "created_at", "updated_at", "title", "user_id" FROM books WHERE id = ? [[1]] (23µs)
2025/04/28 03:38:31 thing.go:1198: DEBUG parseRelationTag: Part='rel=belongs_to', Key='rel', Value='belongs_to'
2025/04/28 03:38:31 thing.go:1205: DEBUG parseRelationTag: Set opts.RelationType to 'belongs_to'
2025/04/28 03:38:31 thing.go:1198: DEBUG parseRelationTag: Part='fk=user_id', Key='fk', Value='user_id'
2025/04/28 03:38:31 thing.go:1264: Dispatching preload for 'Book.User' (Type: belongs_to, FK: user_id, LocalKey: id)
2025/04/28 03:38:31 thing.go:1287: Preloading BelongsTo: Field User (*User), FK in books: user_id
2025/04/28 03:38:31 thing.go:1301: Foreign Key Field in Owning Model (Book): UserID
2025/04/28 03:38:31 thing.go:1328: Collected 1 unique foreign keys for User: [1]
2025/04/28 03:38:31 thing.go:1351: Executing query for related User: SELECT "id", "created_at", "updated_at", "name", "email" FROM users WHERE id IN (?) [[1]]
--- FAIL: TestThing_Query_Preload_BelongsTo (0.00s)
panic: runtime error: invalid memory address or nil pointer dereference [recovered]
	panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x2 addr=0x38 pc=0x104654200]

goroutine 78 [running]:
testing.tRunner.func1.2({0x10484bb00, 0x104a1ccd0})
	/opt/homebrew/Cellar/go/1.24.2/libexec/src/testing/testing.go:1734 +0x1ac
testing.tRunner.func1()
	/opt/homebrew/Cellar/go/1.24.2/libexec/src/testing/testing.go:1737 +0x334
panic({0x10484bb00?, 0x104a1ccd0?})
	/opt/homebrew/Cellar/go/1.24.2/libexec/src/runtime/panic.go:792 +0x124
thing.(*Thing[...]).preloadBelongsTo(0x10489fcd0, {0x10489ca68?, 0x104a9ba40}, {0x104836360, 0x14000322870?, 0xc1fbbfcdc6b7f498?}, {{0x10482c7d5, 0x4}, {0x0, 0x0}, ...}, ...)
	/Users/buru/Work/thing/thing.go:1352 +0xb80
thing.(*Thing[...]).preloadRelations(0x1048a03a0, {0x10489ca68, 0x104a9ba40}, {0x14000116910, 0x140001690e0, 0x53?}, {0x104798cd4?, 0x4})
	/Users/buru/Work/thing/thing.go:1267 +0x49c
thing.(*Thing[...]).queryInternal(0x1048a03a0, {0x10489ca68, 0x104a9ba40}, {{0x1047991fb, 0x6}, {0x1400033a590, 0x1, 0x1}, {0x0, 0x0}, ...})
	/Users/buru/Work/thing/thing.go:640 +0x33c
thing.(*Thing[...]).Query(...)
	/Users/buru/Work/thing/thing.go:181
thing/tests_test.TestThing_Query_Preload_BelongsTo(0x140001dd880)
	/Users/buru/Work/thing/tests/relationships_test.go:46 +0x360
testing.tRunner(0x140001dd880, 0x104898148)
	/opt/homebrew/Cellar/go/1.24.2/libexec/src/testing/testing.go:1792 +0xe4
created by testing.(*T).Run in goroutine 1
	/opt/homebrew/Cellar/go/1.24.2/libexec/src/testing/testing.go:1851 +0x374
FAIL	thing/tests	0.381s
FAIL
