// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"log"
	"thing"
	"thing/cache/redis"
	"thing/drivers/sqlite"
)

// Injectors from wire.go:

// initializeApplication creates the main Application struct with dependencies.
func initializeApplication(dsn string) (*Application, func(), error) {
	dbAdapter, cleanup, err := provideDBAdapter(dsn)
	if err != nil {
		return nil, nil, err
	}
	cacheClient, cleanup2, err := provideRedisCacheClient()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	thing, err := provideUserRepo(dbAdapter, cacheClient)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	thingThing, err := provideBookRepo(dbAdapter, cacheClient)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	application := &Application{
		UserRepo: thing,
		BookRepo: thingThing,
		DB:       dbAdapter,
	}
	return application, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

// provideDBAdapter creates the DB adapter. Includes cleanup.
func provideDBAdapter(dsn string) (thing.DBAdapter, func(), error) {

	db, err := sqlite.NewSQLiteAdapter(dsn)
	if err != nil {
		return nil, nil, err
	}
	cleanup := func() {
		if err := db.Close(); err != nil {
			log.Printf("Error closing DB adapter: %v", err)
		}
	}
	return db, cleanup, nil
}

// provideRedisCacheClient creates the Redis cache client using the thing/cache/redis package.
// Includes cleanup logic.
func provideRedisCacheClient() (thing.CacheClient, func(), error) {

	redisOpts := redis.Options{
		Addr: "localhost:6379",
	}

	return redis.NewClient(redisOpts)
}

// provideUserRepo creates the User repository.
func provideUserRepo(db thing.DBAdapter, cache thing.CacheClient) (*thing.Thing[User], error) {

	return thing.New[User](db, cache)
}

// provideBookRepo creates the Book repository.
func provideBookRepo(db thing.DBAdapter, cache thing.CacheClient) (*thing.Thing[Book], error) {

	return thing.New[Book](db, cache)
}
