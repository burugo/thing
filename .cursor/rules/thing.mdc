---
description: 
globs: *.go
alwaysApply: false
---
# Rule Name: Thing ORM Usage Guide

# Description:
# Quick reference for using the Thing ORM (github.com/burugo/thing).

## Core Concept
- High-performance Go ORM focusing on CRUD and list operations.
- Built-in caching (Redis or in-memory) automatically handles single-entity and list query caching & invalidation.
- Uses Go generics for type safety and a cleaner API.
- Supports MySQL, PostgreSQL, SQLite.

## Configuration
1.  **Create DB Adapter:**
    ```go
    import "github.com/burugo/thing/drivers/db/sqlite" // Or mysql, postgres
    dbAdapter, err := sqlite.NewSQLiteAdapter(":memory:")
    ```
2.  **Create Cache Client (Optional, defaults to in-memory):**
    ```go
    import (
        "github.com/redis/go-redis/v9"
        redisCache "github.com/burugo/thing/drivers/cache/redis"
        "github.com/burugo/thing"
    )
    // Use nil for default in-memory:
    // var cacheClient thing.CacheClient = nil
    // Or Redis:
    // rdb := redis.NewClient(...)
    // cacheClient = redisCache.NewClient(rdb)
    ```
3.  **Get ORM Instance per Model:**
    ```go
    import "github.com/burugo/thing"
    // import your models package

    // For a specific model type (e.g., *models.User)
    userThing, err := thing.New[*models.User](mdc:db)
    ```
    *Alternative Global Config (less flexible):* `thing.Configure(dbAdapter, cacheClient)` then `thing.Use[*Model]()`.

## Basic Usage
1.  **Model Definition:** Embed `thing.BaseModel` and use `db` tags for columns.
    ```go
    type User struct {
        thing.BaseModel // Includes ID, CreatedAt, UpdatedAt, DeletedAt
        Name string `db:"name"` // Explicitly maps Name field to 'name' column
        UserAge int // db tag omitted, defaults to 'user_age' column
    }
    // Optional: Define TableName() method if different from snake_case plural struct name.
    // func (u *User) TableName() string { return "custom_users_table" }
    ```
    **Note:** While using the `db` tag is recommended for clarity, it's technically optional. If omitted, Thing ORM defaults to converting the Go field name (CamelCase, e.g., `UserAge`) to its snake_case equivalent (`user_age`) as the database column name. Use `db:"-"` to explicitly ignore a field.

    **Example:**
    ```go
    // Example: All index types and relationships
    type User struct {
        thing.BaseModel
        Name  string `db:"name,index"`                // Single-field index
        Email string `db:"email,unique"`              // Single-field unique index
        ColA  string `db:"col_a,index:idx_ab"`        // Composite index (idx_ab)
        ColB  int    `db:"col_b,index:idx_ab"`        // Composite index (idx_ab)
        KeyA  string `db:"key_a,unique:uq_ab"`        // Composite unique index (uq_ab)
        KeyB  string `db:"key_b,unique:uq_ab"`        // Composite unique index (uq_ab)
        // Relationship example:
        Books []*Book `thing:"hasMany;fk:user_id;model:Book" db:"-"`
    }
    ```

    **Indexes are always declared in the db tag (index, unique, index:..., unique:...).**
    **The thing tag is only used for relationship declarations (hasMany, belongsTo, model, fk, etc.).**
    **Do not use thing tag for index declaration.**
2.  **CRUD Operations (using `userThing` from config step):**
    - **Create/Update:** `err := userThing.Save(userInstance)`
    - **Read by ID:** `foundUser, err := userThing.ByID(id)` (uses cache)
    - **Delete:** `err := userThing.Delete(userInstance)`
    - **Query:**
        ```go
        params := thing.QueryParams{
            Where: "age > ?", Args: []interface{}{25},
            OrderBy: "name ASC",
            // Preloads: []string{"RelatedModelField"}, // For relationships
        }
        result := userThing.Query(params) // Returns a CachedResult
        // Fetch specific page:
        users, err := result.Fetch(0, 10) // offset 0, limit 10 (uses cache)
        // Count:
        // count, err := result.Count()
        // Chainable Query
        // usersOver18, err := userThing.Where("age > ?", 18).Order("name ASC").Fetch(0, 100)
        // Fetch all:
        // allUsers, err := userThing.All() // This is an alias for userThing.Query(QueryParams{}).All()
        ```

## Key Features
- **Caching:** Mostly automatic for `ByID` and `Query`. Monitor via `cacheClient.GetCacheStats(ctx)`.
- **Relationships:** Define using `thing` struct tags (`hasMany`, `belongsTo`) and preload using `QueryParams.Preloads`. Use `db:"-"` on relation fields.
    ```go
    // User has many Books
    // Books []*Book `thing:"hasMany;fk:user_id;model:Book" db:"-"`
    // Book belongs to User
    // User *User `thing:"belongsTo;fk:user_id" db:"-"`
    ```
- **Hooks:** Register listeners for events (e.g., `BeforeSave`, `AfterCreate`) using `thing.RegisterListener`.
- **Auto Migration:** `thing.AutoMigrate(&User{}, &Book{})` creates/updates tables based on model struct tags (`db`).
- **JSON Serialization:** `thing.ToJSON(model, options...)`. Use `thing.WithFields("field1,nested{subfield},-excluded")` for flexible control, including method-based virtual properties (e.g., `FullName() string` -> `full_name` in DSL).
- **Raw SQL:** Access via `dbAdapter := userThing.DBAdapter()`, then use `dbAdapter.Exec`, `dbAdapter.Get`, `dbAdapter.Select`.

## Focus
- Optimized for common CRUD and list retrieval patterns.
- Complex JOINs or database-specific features might require Raw SQL.